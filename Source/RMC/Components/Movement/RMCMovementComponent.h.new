// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "Interfaces/RMCMomentumBased.h"
#include "RMCMovementComponent.generated.h"

// Delegates
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnWallRunBegin, const FVector&, WallNormal);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnWallRunEnd);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnSlideBegin);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnSlideEnd);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnDashBegin, const FVector&, DashDirection);
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnDashEnd);
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnMomentumChanged, float, NewMomentum);

/**
 * Custom movement component for Titanfall-style momentum-based movement
 */
UCLASS(ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))
class RMC_API URMCMovementComponent : public UCharacterMovementComponent, public IRMCMomentumBased
{
	GENERATED_BODY()

public:
	// Constructor
	URMCMovementComponent(const FObjectInitializer& ObjectInitializer);

	// Movement properties
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running", meta = (ClampMin = "0.0"))
	float WallRunSpeed;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running")
	float WallRunGravityScale;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running")
	float WallRunJumpOffForce;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running")
	float MinWallRunHeight;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running")
	float MaxWallRunTime;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Wall Running")
	float WallRunControlMultiplier;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Sliding", meta = (ClampMin = "0.0"))
	float SlideSpeed;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Sliding")
	float SlideFriction;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Sliding")
	float SlideMinDuration;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Sliding")
	float SlideMaxDuration;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Sliding")
	float SlideMinSpeed;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Dashing", meta = (ClampMin = "0.0"))
	float DashDistance;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Dashing", meta = (ClampMin = "0.0"))
	float DashDuration;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Dashing", meta = (ClampMin = "0.0"))
	float DashCooldown;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Dashing")
	float DashGroundSpeedBoost;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Dashing")
	float DashAirSpeedBoost;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Double Jump")
	float DoubleJumpZVelocity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Momentum", meta = (ClampMin = "0.0"))
	float MomentumRetentionRate;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Momentum", meta = (ClampMin = "0.0"))
	float MaxMomentum;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Momentum")
	float MomentumDecayRate;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Movement|Momentum")
	float MomentumBuildRate;

	// Movement states
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	bool bIsWallRunning;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	bool bIsSliding;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	bool bIsDashing;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	bool bHasDoubleJumped;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	float CurrentMomentum;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	float DashCooldownRemaining;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	float WallRunTimeRemaining;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	float SlideTimeRemaining;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	FVector CurrentWallNormal;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Movement|States")
	FVector DashDirection;

	// Blueprint events
	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnWallRunBegin OnWallRunBegin;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnWallRunEnd OnWallRunEnd;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnSlideBegin OnSlideBegin;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnSlideEnd OnSlideEnd;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnDashBegin OnDashBegin;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnDashEnd OnDashEnd;

	UPROPERTY(BlueprintAssignable, Category = "Movement|Events")
	FOnMomentumChanged OnMomentumChanged;

	// Blueprint callable functions
	UFUNCTION(BlueprintCallable, Category = "Movement|Wall Running")
	void StartWallRun();

	UFUNCTION(BlueprintCallable, Category = "Movement|Wall Running")
	void EndWallRun();

	UFUNCTION(BlueprintCallable, Category = "Movement|Wall Running")
	bool CanWallRun() const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Wall Running")
	void WallRunJump();

	UFUNCTION(BlueprintCallable, Category = "Movement|Sliding")
	void StartSlide();

	UFUNCTION(BlueprintCallable, Category = "Movement|Sliding")
	void EndSlide();

	UFUNCTION(BlueprintCallable, Category = "Movement|Sliding")
	bool CanSlide() const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Dashing")
	bool PerformDash();

	UFUNCTION(BlueprintCallable, Category = "Movement|Dashing")
	bool CanDash() const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Dashing")
	float GetDashCooldownPercent() const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Double Jump")
	bool PerformDoubleJump();

	UFUNCTION(BlueprintCallable, Category = "Movement|Double Jump")
	bool CanDoubleJump() const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Momentum")
	void UpdateMomentum(float DeltaTime);

	// Non-interface version of GetMomentumPercent
	UFUNCTION(BlueprintCallable, Category = "Movement|Momentum")
	float GetMomentumPercentage() const;

	// Interface implementations
	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Movement|Momentum")
	float GetCurrentMomentum() const;
	virtual float GetCurrentMomentum_Implementation() const override;

	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Movement|Momentum")
	void AddMomentum(float Amount);
	virtual void AddMomentum_Implementation(float Amount) override;

	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Movement|Momentum")
	void ReduceMomentum(float Amount);
	virtual void ReduceMomentum_Implementation(float Amount) override;

	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Movement|Momentum")
	bool HasMinimumMomentumForAction(float RequiredMomentum) const;
	virtual bool HasMinimumMomentumForAction_Implementation(float RequiredMomentum) const override;

	UFUNCTION(BlueprintCallable, BlueprintNativeEvent, Category = "Movement|Momentum")
	float GetMomentumPercent() const;
	virtual float GetMomentumPercent_Implementation() const override;

	// Blueprint implementable events
	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Wall Running")
	void OnWallRunBegin_BP(const FVector& WallNormal);

	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Wall Running")
	void OnWallRunEnd_BP();

	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Sliding")
	void OnSlideBegin_BP();

	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Sliding")
	void OnSlideEnd_BP();

	// Fixed parameter name to avoid shadowing
	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Dashing")
	void OnDashBegin_BP(const FVector& DashDir);

	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Dashing")
	void OnDashEnd_BP();

	UFUNCTION(BlueprintImplementableEvent, Category = "Movement|Double Jump")
	void OnDoubleJump_BP();

protected:
	// Override movement functions
	virtual void BeginPlay() override;
	virtual void TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;
	virtual void OnMovementModeChanged(EMovementMode PreviousMovementMode, uint8 PreviousCustomMode) override;
	virtual void PhysWalking(float deltaTime, int32 Iterations) override;
	virtual void PhysCustom(float deltaTime, int32 Iterations) override;
	virtual bool DoJump(bool bReplayingMoves) override;
	virtual float GetMaxSpeed() const override;
	virtual float GetMaxAcceleration() const override;

	// Custom movement modes
	enum ECustomMovementMode
	{
		CMOVE_WallRunning = 0,
		CMOVE_Sliding = 1,
		CMOVE_Dashing = 2
	};

	// Helper functions
	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	bool FindWallRunSurface(FVector& OutWallNormal) const;

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void ApplyWallRunForces(float DeltaTime, const FVector& WallNormal);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void ApplySlideForces(float DeltaTime);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void ApplyDashForces(float DeltaTime);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void UpdateDashCooldown(float DeltaTime);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void UpdateWallRunTime(float DeltaTime);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void UpdateSlideTime(float DeltaTime);

	UFUNCTION(BlueprintCallable, Category = "Movement|Utility")
	void ResetJumpState();

	// Timer handles
	FTimerHandle TimerHandle_WallRunTimeout;
	FTimerHandle TimerHandle_SlideTimeout;
	FTimerHandle TimerHandle_DashTimeout;
};